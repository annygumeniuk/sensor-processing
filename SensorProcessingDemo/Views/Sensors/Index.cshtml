@{
    ViewData["Title"] = "Sensor Dashboard";
}
<link rel="stylesheet" href="~/css/windymap.css" asp-append-version="true" />
<script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>

<h1>Real-Time Sensor Dashboard</h1>

<form id="locationForm">
    <label for="latitude">Latitude:</label>
    <input class="long-lat-input" type="number" id="latitude" name="latitude" step="0.0001" min="@SensorProcessingDemo.Common.Constants.LAT_MIN" max="@SensorProcessingDemo.Common.Constants.LAT_MAX">    


    <label for="longitude">Longitude:</label>
    <input class ="long-lat-input" type="number" id="longitude" name="longitude" step="0.0001" min="@SensorProcessingDemo.Common.Constants.LONG_MIN" max="@SensorProcessingDemo.Common.Constants.LONG_MAX">
    

    <button type="button" class="btn btn-primary" id="toggleMonitoringBtn" onclick="toggleMonitoring()">Start Monitoring</button>
</form>

<div id="sensorData">
    <a asp-controller="Sensors" asp-action="GetAll">All records</a>
    <a asp-controller="AlertCollector" asp-action="Index">View Alerts</a>
</div>

<div id="charts-container" style="display: flex; flex-direction: column; gap: 20px;">
    <div id="temperatureChart" style="height: 300px; width: 100%;"></div>
    <div id="humidityChart" style="height: 300px; width: 100%;"></div>
    <div id="visibilityChart" style="height: 300px; width: 100%;"></div>
    <div id="atmPressChart" style="height: 300px; width: 100%;"></div>
</div>

<script>

    async function toggleMonitoring() {
       
        const latitude = document.getElementById("latitude").value || null;
        const longitude = document.getElementById("longitude").value || null;

        try {
            const response = await fetch('/toggle-monitoring', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ latitude, longitude })
            });

            const data = await response.json();
            document.getElementById("toggleMonitoringBtn").innerText = data.isRunning ? "Stop Monitoring" : "Start Monitoring";
        } catch (error) {
            console.error("Error toggling monitoring", error);
        }
    }

    const updateInterval = @SensorProcessingDemo.Common.Constants.UpdateIntervalSeconds * 1000;

    const charts = {
        Temperature: new CanvasJS.Chart("temperatureChart", {
            title: { text: "Temperature (°C)" },
            axisY: { title: "Value", includeZero: false },
            data: [{ type: "line", dataPoints: [] }]
        }),
        Humidity: new CanvasJS.Chart("humidityChart", {
            title: { text: "Humidity (%)" },
            axisY: { title: "Value", includeZero: false },
            data: [{ type: "line", dataPoints: [] }]
        }),
        Visibility: new CanvasJS.Chart("visibilityChart", {
            title: { text: "Visibility (m)" },
            axisY: { title: "Value", includeZero: false },
            data: [{ type: "line", dataPoints: [] }]
        }),
         AtmosphericPressure: new CanvasJS.Chart("atmPressChart", {
            title: { text: "Atmospheric Pressure (hPa)" },
            axisY: { title: "Value", includeZero: false },
            data: [{ type: "line", dataPoints: [] }]
        })
    };
    
    function fetchSensorData() {
        fetch('/get-sensor-data')
            .then(response => response.json())
            .then(data => {
                Object.keys(data).forEach(sensor => {
                    const points = data[sensor].map(({ time, value }) => ({
                        x: new Date(time),
                        y: value
                    }));
                    charts[sensor].options.data[0].dataPoints = points;
                    charts[sensor].render();
                });
            });
    }

    setInterval(fetchSensorData, updateInterval);
    fetchSensorData();
</script>
