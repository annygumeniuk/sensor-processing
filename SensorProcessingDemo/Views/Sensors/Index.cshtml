@{
    ViewData["Title"] = "Sensor Dashboard";
}
<link rel="stylesheet" href="~/css/sensorpage.css" asp-append-version="true" />
<!-- First jQuery -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

<!-- Then jQuery validate (depends on jQuery) -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>

<!-- Finally jQuery validate unobtrusive (depends on both above) -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>

<!-- CanvasJS should be loaded last, as it's used for charts -->
<script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>

<h1>Real-Time Sensor Dashboard</h1>

<script>
    // Debug script loading
    console.log("Page loading started");

    function checkLibraries() {
        console.log("jQuery loaded:", typeof $ !== 'undefined');
        console.log("jQuery validator loaded:", typeof $.validator !== 'undefined');
        console.log("jQuery validator unobtrusive loaded:",
            typeof $.validator !== 'undefined' && typeof $.validator.unobtrusive !== 'undefined');
        console.log("CanvasJS loaded:", typeof CanvasJS !== 'undefined');
    }

    // Check after page loads
    window.addEventListener('load', function() {
        console.log("Window loaded");
        checkLibraries();
    });
</script>

<div>
    <form id="locationForm">
        
            <label for="latitude">Latitude:</label>
            <input class="long-lat-input" type="number" id="latitude" name="latitude" step="0.0001" 
                   min="@SensorProcessingDemo.Common.Constants.LAT_MIN" 
                   max="@SensorProcessingDemo.Common.Constants.LAT_MAX"
                   data-val="true"
                   data-val-required="Latitude is required"
                   data-val-range="@SensorProcessingDemo.Common.Constants.LAT_ErrorMessage">  

            <label for="longitude">Longitude:</label>
            <input class ="long-lat-input" type="number" id="longitude" name="longitude" step="0.0001"
                   min="@SensorProcessingDemo.Common.Constants.LONG_MIN"
                   max="@SensorProcessingDemo.Common.Constants.LONG_MAX"
                   data-val="true"
                   data-val-required="Longitude is required"
                   data-val-range="@SensorProcessingDemo.Common.Constants.LONG_ErrorMessage">        
        
        <button type="button" class="btn btn-primary" id="toggleMonitoringBtn" onclick="toggleMonitoring()">Start Monitoring</button>
        
        <div class="error-messages">
                <span class="text-danger" data-valmsg-for="latitude" data-valmsg-replace="true"></span>
                <span class="text-danger" data-valmsg-for="longitude" data-valmsg-replace="true"></span>
        </div>
    </form>
</div>

<div id="sensorData">
    <a asp-controller="Sensors" asp-action="GetAll">All records</a>
    <a asp-controller="AlertCollector" asp-action="Index">View Alerts</a>
</div>

<div id="charts-container" style="display: flex; flex-direction: column; gap: 20px;">
    <div id="temperatureChart" style="height: 300px; width: 100%;"></div>
    <div id="humidityChart" style="height: 300px; width: 100%;"></div>
    <div id="visibilityChart" style="height: 300px; width: 100%;"></div>
    <div id="atmPressChart" style="height: 300px; width: 100%;"></div>
</div>

<script>
    // Store constants from server
    const LAT_MIN = @SensorProcessingDemo.Common.Constants.LAT_MIN;
    const LAT_MAX = @SensorProcessingDemo.Common.Constants.LAT_MAX;
    const LONG_MIN = @SensorProcessingDemo.Common.Constants.LONG_MIN;
    const LONG_MAX = @SensorProcessingDemo.Common.Constants.LONG_MAX;
    const UPDATE_INTERVAL = @SensorProcessingDemo.Common.Constants.UpdateIntervalSeconds * 1000;
    
    function validateCoordinates(lat, lng) {
           let isValid = true;

           // Clear previous error messages
           $('#latitudeError').text('');
           $('#longitudeError').text('');

           if (lat !== null) {
               if (lat < LAT_MIN || lat > LAT_MAX) {
                   $('#latitudeError').text(`Latitude must be between ${LAT_MIN} and ${LAT_MAX}`);
                   isValid = false;
               }
           }

           if (lng !== null) {
               if (lng < LONG_MIN || lng > LONG_MAX) {
                   $('#longitudeError').text(`Longitude must be between ${LONG_MIN} and ${LONG_MAX}`);
                   isValid = false;
               }
           }

           return isValid;
       }


    async function toggleMonitoring() {
       
        // Parse values as numbers
        const latitudeInput = document.getElementById("latitude").value;
        const longitudeInput = document.getElementById("longitude").value;
        
        const latitude = latitudeInput === "" ? null : parseFloat(latitudeInput);
        const longitude = longitudeInput === "" ? null : parseFloat(longitudeInput);

        if (longitude != null && latitude != null) {
              if (!validateCoordinates(latitude, longitude)) {
                return; // Stop if validation fails
            }
        }

        try {
            const response = await fetch('/toggle-monitoring', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ latitude, longitude })
            });

            const data = await response.json();
            document.getElementById("toggleMonitoringBtn").innerText = data.isRunning ? "Stop Monitoring" : "Start Monitoring";
        } catch (error) {
            console.error("Error toggling monitoring", error);
        }
    }

    const updateInterval = @SensorProcessingDemo.Common.Constants.UpdateIntervalSeconds * 1000;

    const charts = {
        Temperature: new CanvasJS.Chart("temperatureChart", {
            title: { text: "Temperature (°C)" },
            axisY: { title: "Value", includeZero: false },
            data: [{ type: "line", dataPoints: [] }]
        }),
        Humidity: new CanvasJS.Chart("humidityChart", {
            title: { text: "Humidity (%)" },
            axisY: { title: "Value", includeZero: false },
            data: [{ type: "line", dataPoints: [] }]
        }),
        Visibility: new CanvasJS.Chart("visibilityChart", {
            title: { text: "Visibility (m)" },
            axisY: { title: "Value", includeZero: false },
            data: [{ type: "line", dataPoints: [] }]
        }),
         AtmosphericPressure: new CanvasJS.Chart("atmPressChart", {
            title: { text: "Atmospheric Pressure (hPa)" },
            axisY: { title: "Value", includeZero: false },
            data: [{ type: "line", dataPoints: [] }]
        })
    };
    
    function fetchSensorData() {
        fetch('/get-sensor-data')
            .then(response => response.json())
            .then(data => {
                Object.keys(data).forEach(sensor => {
                    const points = data[sensor].map(({ time, value }) => ({
                        x: new Date(time),
                        y: value
                    }));
                    charts[sensor].options.data[0].dataPoints = points;
                    charts[sensor].render();
                });
            });
    }

    setInterval(fetchSensorData, updateInterval);
    fetchSensorData();
</script>
