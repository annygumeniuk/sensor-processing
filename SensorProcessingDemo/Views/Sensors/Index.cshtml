@{
    ViewData["Title"] = "Sensor Dashboard";
}

<script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
<h1>Real-Time Sensor Dashboard</h1>

<button class="btn btn-primary" id="toggleMonitoringBtn" onclick="toggleMonitoring()">Start Monitoring</button>
<div id="sensorData">
    <a asp-controller="Sensors" asp-action="AllSensorsRecords">All records</a>
</div>

<div id="charts-container" style="display: flex; flex-direction: column; gap: 20px;">
    <div id="temperatureChart" style="height: 300px; width: 100%;"></div>
    <div id="humidityChart" style="height: 300px; width: 100%;"></div>
    <div id="lightingChart" style="height: 300px; width: 100%;"></div>
</div>

<script>

    async function toggleMonitoring() {
        try {
            const response = await fetch('/toggle-monitoring', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });

            const data = await response.json();
            document.getElementById("toggleMonitoringBtn").innerText = data.isRunning ? "Stop Monitoring" : "Start Monitoring";
        } catch (error) {
            console.error("Error toggling monitoring", error);
        }
    }

    const updateInterval = @SensorProcessingDemo.Common.Constants.UpdateIntervalSeconds * 1000;

    const charts = {
        Temperature: new CanvasJS.Chart("temperatureChart", {
            title: { text: "Temperature (°C)" },
            axisY: { title: "Value", includeZero: false },
            data: [{ type: "line", dataPoints: [] }]
        }),
        Humidity: new CanvasJS.Chart("humidityChart", {
            title: { text: "Humidity (%)" },
            axisY: { title: "Value", includeZero: false },
            data: [{ type: "line", dataPoints: [] }]
        }),
        Lighting: new CanvasJS.Chart("lightingChart", {
            title: { text: "Lighting (lx)" },
            axisY: { title: "Value", includeZero: false },
            data: [{ type: "line", dataPoints: [] }]
        })
    };

    function fetchSensorData() {
        fetch('/get-sensor-data')
            .then(response => response.json())
            .then(data => {
                Object.keys(data).forEach(sensor => {
                    const points = data[sensor].map(({ time, value }) => ({
                        x: new Date(time),
                        y: value
                    }));
                    charts[sensor].options.data[0].dataPoints = points;
                    charts[sensor].render();
                });
            });
    }

    setInterval(fetchSensorData, updateInterval);
    fetchSensorData();
</script>
